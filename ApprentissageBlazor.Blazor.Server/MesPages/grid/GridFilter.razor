@using ApprentissageBlazor.Module.BusinessObjects
@using DevExpress.Data.Filtering;
@using DevExpress.ExpressApp;
@inject IJSRuntime JSRuntime


<style>
    .main-toolbar {
        display: none;
    }
</style>

<br />
<p class="demo-text cw-480 mt-2">
    <h2>Article Stock</h2>
</p>
<br />
<div class="d-flex flex-row cw-480">
    <div class="me-2 mb-2">
        @{
            foreach (DashboardFilter_Details DashboradItem in dashBordFilters)
            {
                <div>
                    <span>@DashboradItem.ChampsName</span>
                    @{
                        if (DashboradItem.Type == "Lookup")
                        {
                            <DxComboBox Data="@DomaineObjsFirstName"
                        TextFieldName="@DashboradItem.ChampsName"
                        @bind-Value="@SelectedFirstName"
                        CssClass="cw-480"
                        ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" />
                        }
                    }
                    @{
                        if (DashboradItem.Type == "bool")
                        {
                            <DxCheckBox CheckType="CheckType.Switch"
                        LabelPosition="LabelPosition.Left"
                        Checked="@SilentMode"
                        CheckedChanged="@((bool t) => CheckedChanged(t))"
                        Alignment="CheckBoxContentAlignment.SpaceBetween">
                                Silent Mode
                            </DxCheckBox>
                        }
                    }
                    @{
                        if (DashboradItem.Type == "Date")
                        {
                            <DxDateEdit @bind-Date="@DateTimeValue"
                        CssClass="cw-320" />
                            <p class="demo-text cw-320 mt-2">
                                Date: <b>@DateTimeValue.ToString("dddd, dd MMMM yyyy")</b>
                            </p>
                        }
                    }
                </div>
            }
        }
    </div>

    <!-- <DxComboBox Data="@DomaineObjsFirstName"
                TextFieldName="@nameof(DomainObject1.FirstName)"
    @bind-Value="@SelectedFirstName"
                CssClass="cw-480"
                ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" />

    <DxComboBox Data="@DomaineObjsLastName"
                TextFieldName="@nameof(DomainObject1.LastName)"
    @bind-Value="@SelectedLastName"
                CssClass="cw-480"
                ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" />-->

    <div class="me-2 mb-2">
        <DxButton RenderStyle="@btnStyles"
                  Text="Recherche"
                  CssClass="w-100"
                  Click="@(_ => OnButtonClick())" />
    </div>
</div>


<br />


<DxGrid Data="@Data"
        ShowSearchBox="true"
        SearchTextParseMode="CurrentSearchTextParseMode">
    <Columns>
        <DxGridDataColumn FieldName="FirstName" DisplayFormat="D" MinWidth="100" />
        <DxGridDataColumn FieldName="LastName" Width="15%" />
        <DxGridDataColumn FieldName="Age" Width="15%" />
        <DxGridDataColumn FieldName="BirthDay" Width="10%" />
        <DxGridDataColumn FieldName="PhoneNumber" Width="10%" />
    </Columns>
</DxGrid>



@code {

    ButtonRenderStyle btnStyles;
    GridSearchTextParseMode CurrentSearchTextParseMode { get; set; } = GridSearchTextParseMode.GroupWordsByAnd;

    [ParameterAttribute]
    public bool Sound { get; set; } = true;
    [ParameterAttribute]
    public bool Enabled { get; set; } = false;
    [ParameterAttribute]
    public bool SilentMode { get; set; } = true;


    //[CascadingParameterAttribute]
    [ParameterAttribute]
    public IEnumerable<DomainObject1> DomaineObjsFirstName { get; set; }
    public DomainObject1 SelectedFirstName { get; set; }

    //[CascadingParameterAttribute]
    [ParameterAttribute]
    public IEnumerable<DomainObject1> DomaineObjsLastName { get; set; }
    public DomainObject1 SelectedLastName { get; set; }

    [ParameterAttribute]
    public object Data { get; set; }

    [ParameterAttribute]
    public IObjectSpace objectSpace { get; set; }

    [ParameterAttribute]
    public IList<DashboardFilter_Details> dashBordFilters { get; set; }

    DateTime DateTimeValue { get; set; } = DateTime.Now;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        SelectedFirstName = DomaineObjsFirstName?.FirstOrDefault();
        SelectedLastName = DomaineObjsLastName?.FirstOrDefault();
        btnStyles = ButtonRenderStyle.Primary;

    }
    void CheckedChanged(bool value)
    {
        SilentMode = value;
        Enabled = !value;
    }
    void OnButtonClick()
    {
        string FirstName = this.SelectedFirstName?.FirstName;
        string LastName = this.SelectedLastName?.LastName;


        CriteriaOperator personCriteria = null;

        if (!string.IsNullOrEmpty(LastName))
        {
            personCriteria = new BinaryOperator(nameof(DomainObject1.LastName), LastName, BinaryOperatorType.Equal);
        }

        if (!string.IsNullOrEmpty(FirstName))
        {
            CriteriaOperator firstNameCriteria = new BinaryOperator(nameof(DomainObject1.FirstName), FirstName, BinaryOperatorType.Equal);

            if (personCriteria is null)
            {
                personCriteria = firstNameCriteria;
            }
            else
            {
                personCriteria &= firstNameCriteria;
            }
        }

        Data = objectSpace.GetObjects<DomainObject1>(personCriteria);
    }
}